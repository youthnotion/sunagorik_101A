FBInstant.initializeAsync().then(() => {
    const googleFont = new FontFace(
        'Oswald',
        'url(https://fonts.gstatic.com/s/oswald/v53/TK3iWkUHHAIjg752GT8G.woff2)'
    );

    googleFont.load().then((loadedFont) => {
        document.fonts.add(loadedFont);
        console.log('Font loaded:', loadedFont);
        return document.fonts.ready;
    }).then(() => {
        console.log('Font is ready');
        return preloadImages();
    }).then(() => {
        FBInstant.setLoadingProgress(100);
        return FBInstant.startGameAsync();
    }).then(() => {
        console.log("Game started");
    }).catch((error) => {
        console.error('Error during initialization:', error);
    });
});

const firebaseConfig = {
    apiKey: "AIzaSyB4Pz--PR2t0AM_9f3Zy8EOJlUsqroIa8E",
    authDomain: "sunagorik-io.firebaseapp.com",
    projectId: "sunagorik-io",
    storageBucket: "sunagorik-io.firebasestorage.app",
    messagingSenderId: "712940291812",
    appId: "1:712940291812:web:eab16c3a505e1f52ff4ef1"
};

const app = firebase.initializeApp(firebaseConfig);
const database = firebase.firestore();

const questions = [
    {
        image: "./assets/resizedQuestions/Q 1.png",
        question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶™‡¶æ‡¶®‡ßá‡¶∞ ‡¶¶‡ßã‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶™‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶∞ ‡¶¨‡ßã‡¶§‡¶≤ ‡¶´‡ßá‡¶≤‡¶æ ‡¶ï‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶è‡¶ü‡¶æ ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶õ‡¶ø!", score: -15 },
            { text: "‡¶®‡¶æ, ‡¶™‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ü‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ó ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶°‡¶æ‡¶∏‡ßç‡¶ü‡¶¨‡¶ø‡¶®‡ßá ‡¶´‡ßá‡¶≤‡¶ø‡•§", score: +15 },
            { text: "‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶®‡¶æ ‡¶ö‡¶æ‡¶á‡¶§‡ßá‡¶ì ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§", score: -5 }
        ]
    },
    {
        image: "./assets/resizedQuestions/Q 2.png",
        question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶ø ‡¶Æ‡¶®‡ßá ‡¶π‡¶Ø‡¶º ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶ü‡¶Ø‡¶º‡¶≤‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶Ü‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Ü‡¶∞‡¶æ‡¶Æ‡•§", score: -20 },
            { text: "‡¶®‡¶æ, ‡¶ü‡¶Ø‡¶º‡¶≤‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶≤‡¶ú‡ßç‡¶ú‡¶æ ‡¶®‡ßá‡¶á‡•§", score: +15 },
            { text: "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡¶Ø‡¶º‡¶≤‡ßá‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá‡•§", score: -10 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 3.png",
        question: "‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶¨‡¶æ‡¶∏‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ‡¶∞‡ßÄ ‡¶ì ‡¶™‡ßç‡¶∞‡¶¨‡ßÄ‡¶£‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ø‡¶ü ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡ßá‡¶®?",
        options: [
            { text: "‡¶®‡¶æ, ‡¶∏‡¶ø‡¶ü ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶ú‡¶§‡ßç‡¶¨‡•§", score: -15 },
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶ø‡¶ü ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶ó‡¶∞‡ßç‡¶¨ ‡¶π‡¶Ø‡¶º‡•§", score: +20 },
            { text: "‡¶ï‡¶ñ‡¶®‡ßã ‡¶ï‡¶ñ‡¶®‡ßã, ‡¶Ø‡¶¶‡¶ø ‡¶¶‡¶æ‡¶Å‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶á‡¶ö‡ßç‡¶õ‡ßá ‡¶π‡¶Ø‡¶º‡•§", score: 0 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q4.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡ßá‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü ‡¶∞‡ßá‡¶ñ‡ßá ‡¶Ü‡¶∏‡ßá‡¶®?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶è‡¶ü‡¶æ‡¶á ‡¶§‡ßã ‡¶™‡¶ø‡¶ï‡¶®‡¶ø‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶ú‡¶æ‡•§", score: -15 },
            { text: "‡¶®‡¶æ, ‡¶Æ‡¶Ø‡¶º‡¶≤‡¶æ ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡¶ø‡•§", score: +20 },
            { text: "‡¶ï‡¶ñ‡¶®‡ßã ‡¶≠‡ßÅ‡¶≤‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶Ü‡¶∏‡¶ø‡•§", score: -5 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q5.jpeg",
        question: "‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ‡ßü ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡¶§‡ßá ‡¶¨‡¶æ ‡¶≠‡¶æ‡¶Ç‡¶ö‡ßÅ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ï‡¶∞‡ßá‡¶®?",
        options: [
            { text: "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶∞‡¶ø‡•§", score: -10 },
            { text: "‡¶™‡¶æ‡¶∂ ‡¶ï‡¶æ‡¶ü‡¶æ‡ßü‡ßá ‡¶Ø‡¶æ‡¶á‡•§", score: 0 },
            { text: "‡¶ó‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶ø‡¶ì ‡¶¶‡ßÅ ‡¶ö‡¶æ‡¶∞ ‡¶ò‡¶æ ‡¶Æ‡ßá‡¶∞‡ßá ‡¶Ü‡¶∏‡¶ø‡•§", score: +15 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 6.png",
        question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶ø ‡¶Æ‡¶®‡ßá ‡¶π‡¶Ø‡¶º ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤-‡¶ï‡¶≤‡ßá‡¶ú‡ßá‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ‡¶≤‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶Ü‡¶∞‡ßç‡¶ü?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§", score: -10 },
            { text: "‡¶®‡¶æ, ‡¶è‡¶ü‡¶æ ‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶ï‡¶ü‡ßÅ‡•§", score: +10 },
            { text: "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶π‡¶≤‡ßá‡•§", score: -5 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 7.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶≠‡¶ø‡ßú‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶ó‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶æ‡¶ï‡ßç‡¶ï‡¶æ ‡¶Æ‡¶æ‡¶∞‡¶æ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‚Äò‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡¶ø‡¶≤‚Äô ‡¶≠‡¶æ‡¶¨‡ßá‡¶®?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶ó‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶á ‡¶Ü‡¶∏‡¶≤‡•§", score: -15 },
            { text: "‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶¶‡¶æ‡¶Å‡¶°‡¶º‡¶æ‡¶á‡•§", score: +15 },
            { text: "‡¶Ø‡¶ñ‡¶® ‡¶ñ‡ßÅ‡¶¨ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø, ‡¶§‡¶ñ‡¶® ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶®‡ßç‡¶Ø ‡¶ï‡¶∞‡¶ø‡•§", score: -5 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 8.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Æ‡¶Ø‡¶º‡¶≤‡¶æ ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‚Äò‡¶Æ‡¶Ø‡¶º‡¶≤‡¶æ ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶§‡ßá‡¶Æ‡¶® ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º ‡¶´‡ßá‡¶≤‡ßã‚Äô ‡¶è‡¶á ‡¶§‡¶§‡ßç‡¶§‡ßç‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ?",
        options: [
            { text: "‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á! ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡ßá‡¶Ø‡¶º‡•§", score: -20 },
            { text: "‡¶®‡¶æ, ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶§‡ßá‡¶á ‡¶´‡ßá‡¶≤‡¶ø‡•§", score: +20 },
            { text: "‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶∏‡ßç‡¶ü‡¶¨‡¶ø‡¶® ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¶‡ßÇ‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶ñ‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá-‡¶ì‡¶ñ‡¶æ‡¶®‡ßá‡•§", score: -10 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 9.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßá‡¶® ‚Äò‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‚Äô ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶°‡¶º‡¶≤‡ßã‡¶ï‡¶¶‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§", score: -20 },
            { text: "‡¶®‡¶æ, ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡•§", score: +20 },
            { text: "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶æ‡¶Ø‡¶º‡•§", score: -5 }
        ]
    },
    {
        image: "./assets/resizedQuestions/q 10.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶≤‡¶æ‡¶á‡¶ü‡ßá ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶ï‡ßá‡¶§ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‚Äò‡¶Ü‡¶Æ‡¶ø VIP‚Äô ‡¶≠‡¶æ‡¶¨‡ßá‡¶®?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶ï‡ßá‡¶§ VIP-‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Ø‡¶º‡•§", score: -20 },
            { text: "‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø ‡¶ß‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶ø‡•§", score: +20 },
            { text: "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ø‡¶ñ‡¶® ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ‡¶ü‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡ßá‡•§", score: -10 }
        ]
    },
    {
        image: "./assets/resizedQuestions/11.png",
        question: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶≤‡ßã‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶®?",
        options: [
            { text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶ø ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶ö‡ßá‡¶§‡¶®‡•§", score: +20 },
            { text: "‡¶®‡¶æ, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶∏‡ßá?", score: -10 },
            { text: "‡¶ï‡¶ñ‡¶®‡ßã ‡¶≠‡¶æ‡¶¨‡¶ø‡¶®‡¶ø‡•§", score: 0 } 
        ]
    }
];

const results = [
    { 
        minScore: 90, 
        title: '‡¶Ö‡¶≤‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'üèÖ',
        imgs: ["./assets/resizedAward/01_Allrounder Sunagorik 1.png"]
    },
    { 
        minScore: 70, 
        title: 'Pookie ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'ü•πüéÄ',
        imgs: ["./assets/resizedAward/02_Pookie Sunagorik 1.jpg", "./assets/resizedAward/02_Pookie Sunagorik 2.jpg", "./assets/resizedAward/02_Pookie Sunagorik 3.jpeg"]
    },
    { 
        minScore: 50, 
        title: '‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'ü•∞',
        imgs: ["./assets/resizedAward/03_Premik Sunagorik 01.jpeg", "./assets/resizedAward/03_Premik Sunagorik 02.jpg", "./assets/resizedAward/03_Premik sunagorik 03.jpg"] 
    },
    { 
        minScore: 30, 
        title: '‡¶á‡¶®‡ßç‡¶ü‡ßá‡¶∞‡¶ø‡¶Æ ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: '‚åõ',
        imgs: ["./assets/resizedAward/04_Majhemodhye Sunagorik 02.jpeg", "./assets/resizedAward/04_Majhemodhye Sunagorik 03.jpg", "./assets/resizedAward/04_majhemodhye sunagorik.png"]
    },
    { 
        minScore: 0, 
        title: '‡¶™‡¶≤‡ßç‡¶ü‡¶ø‡¶¨‡¶æ‡¶ú ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'ü§∏',
        imgs: ["./assets/resizedAward/05_Poltibaj sunagorik 2.jpeg", "./assets/resizedAward/05_Poltibaj sunagorik 3.jpeg", "./assets/resizedAward/05_Poltibaj sunagorik.png"]
    },
    { 
        minScore: -20, 
        title: '‡¶ò‡ßÅ‡¶Æ‡¶®‡ßç‡¶§ ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'üò¥',
        imgs: ["./assets/resizedAward/06_Ghumonto sunagorik 02.jpeg", "./assets/resizedAward/06_ghumonto sunagorik 03.jpeg", "./assets/resizedAward/06_ghumonto sunagorik.png"] 
    },
    { 
        minScore: Number.MIN_SAFE_INTEGER, 
        title: '‡¶°‡ßá‡¶° ‡¶á‡¶®‡¶∏‡¶æ‡¶á‡¶° ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï', 
        icon: 'üòµ',
        imgs: ["./assets/resizedAward/07_Ded inside sunagorik 1.jpeg", "./assets/resizedAward/07_Ded inside sunagorik 2.webp", "./assets/resizedAward/07_Ded inside sunagorik 3.png"] 
    },
];

const preloadedImages = [];
let loadedImages = 0;
const totalImages = questions.length + results.reduce((acc, result) => acc + result.imgs.length, 0);

function preloadImages() {
    return new Promise((resolve) => {
        if (totalImages === 0) {
            resolve();
            return;
        }

        function updateProgress() {
            const progress = Math.round((loadedImages / totalImages) * 100);
            FBInstant.setLoadingProgress(progress);
            if (loadedImages === totalImages) {
                resolve();
            }
        }

        questions.forEach(q => {
            const img = new Image();
            img.src = q.image;
            img.onload = () => {
                loadedImages++;
                updateProgress();
            };
            preloadedImages.push(img);
        });

        results.forEach(result => {
            result.imgs.forEach(imgSrc => {
                const img = new Image();
                img.src = imgSrc;
                img.onload = () => {
                    loadedImages++;
                    updateProgress();
                };
                preloadedImages.push(img);
            });
        });
    });
}


let currentQuestion = 0;
let totalScore = 0;

const startSec = getElementbyID("start");
const startBtn = getElementbyID("start-btn");
const quizSec = getElementbyID("quiz");
const resultSec = getElementbyID("result");
const retryBtn = getElementbyID("retry-btn");
const skipBtn = getElementbyID('skip-email-btn')
const submitBtn = getElementbyID('submit-email-btn');
const emailSec = getElementbyID("email-collection");
const shareBtn = getElementbyID('share-btn');

startBtn.addEventListener('click', startQuiz);
retryBtn.addEventListener('click', retryQuiz);
skipBtn.addEventListener('click', showResult);
submitBtn.addEventListener('click', emailSubmit);
shareBtn.addEventListener('click', shareGame);


function getElementbyID(id) {
    return document.getElementById(id);
}

function hideComponent(comp) {
    if(!comp.classList.contains("hidden")){
        comp.classList.add("hidden")
    }
}

function showComponent(comp) {
    if(comp.classList.contains("hidden")){
        comp.classList.remove("hidden")
    }
}


function validateEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
}

function showCustomDialog(message) {
    const dialog = getElementbyID('custom-dialog');
    const dialogMessage = getElementbyID('dialog-message');
    const dialogOk = getElementbyID('dialog-ok');

    dialogMessage.textContent = message;
    dialog.classList.remove("hidden");

    const hideDialog = () => {
        dialog.classList.add("hidden");
    };

    dialogOk.addEventListener('click', hideDialog);

    setTimeout(() => {
        if (!dialog.classList.contains("hidden")) {
            hideDialog();
        }
    }, 3000);
}

function emailSubmit() {
    const email = document.getElementById('email').value;
    if (!validateEmail(email)) {
        showCustomDialog('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á-‡¶Æ‡ßá‡¶á‡¶≤‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®!');
        return;
    }

    const userData = {
        email: email,
        score: totalScore,
        timestamp: new Date().toISOString()
    };

    database.collection('participant-emails').add(userData)
    .then(() => {
        showCustomDialog('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á-‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!');
        document.getElementById('email').value = '';
        showResult();
    })
    .catch((error) => {
        showCustomDialog('‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!');
        console.error('Error submitting email: ', error);
    });
}


function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function loadQuestion() {
    const questionElement = document.querySelector('.question');
    const optionsElement = document.querySelector('.options');
    const imageElement = document.querySelector('.image-box img');
    const progressBar = document.querySelector('.progress-bar div');

    const question = questions[currentQuestion];
    questionElement.textContent = question.question;
    const preloadedImg = preloadedImages.find(img => img.src.includes(question.image));
    imageElement.src = preloadedImg ? preloadedImg.src : question.image;
    optionsElement.innerHTML = '';

    const shuffledOptions = shuffle([...question.options]);
    shuffledOptions.forEach(option => {
        const button = document.createElement('button');
        button.className = `option`;
        button.textContent = option.text;
        button.onclick = () => handleAnswer(option.score);
        optionsElement.appendChild(button);
    });

    progressBar.style.width = `${((currentQuestion + 1) / questions.length) * 100}%`;
}

function handleAnswer(score) {
    totalScore += score;
    currentQuestion++;

    if (currentQuestion < questions.length) {
        loadQuestion();
    } else {
        showEmailCol();
    }
}

let randomImgSrc;
let preloadedResultImg;
let result;

function showResult() {
    hideComponent(emailSec);
    showComponent(resultSec);
    const image = document.querySelector('.resImg');
    const resultTitle = document.querySelector('.result-title');
    const badge = document.querySelector('.badge');


    result = results.find(r => totalScore >= r.minScore);

    randomImgSrc = result.imgs[Math.floor(Math.random() * result.imgs.length)];
    preloadedResultImg = preloadedImages.find(img => img.src.includes(randomImgSrc));
    image.src = preloadedResultImg ? preloadedResultImg.src : randomImgSrc;

    resultTitle.textContent = result.title;
    badge.textContent = result.icon;

    hideComponent(quizSec);
    showComponent(resultSec);
}

function startQuiz() {
    hideComponent(startSec);
    shuffle(questions);
    loadQuestion();
    showComponent(quizSec);
}

function retryQuiz() {
    currentQuestion = 0;
    totalScore = 0;
    hideComponent(resultSec);
    showComponent(startSec);
}

function shareGame() {
    const userPic = FBInstant.player.getPhoto();
    const userName = FBInstant.player.getName();

    function generateShareImage(callback) {
        let canvas = document.createElement('canvas');
        let ctx = canvas.getContext('2d');

        canvas.width = 800;
        canvas.height = 800;

        let bgImage = new Image();
        bgImage.src = preloadedResultImg ? preloadedResultImg.src : randomImgSrc;
        bgImage.crossOrigin = 'Anonymous';

        bgImage.onload = function () {
            ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

            let profileSize = 115;
            let profileX = 340;
            let profileY = canvas.height - 250;

            ctx.font = "bold 50px Oswald, Arial";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillStyle = "#FFFFFF";

            ctx.strokeStyle = "#000000";
            ctx.lineWidth = 8;

            ctx.strokeText(userName, 400, profileY + profileSize + 45);
            ctx.fillText(userName, 400, profileY + profileSize + 45);

            ctx.strokeText(`‡¶Ü‡¶Æ‡¶ø ${result.title} ${result.icon}`, 400, profileY + profileSize + 100);
            ctx.fillText(`‡¶Ü‡¶Æ‡¶ø ${result.title} ${result.icon}`, 400, profileY + profileSize + 100);

            let profileImg = new Image();
            profileImg.src = userPic;
            profileImg.crossOrigin = 'Anonymous';

            profileImg.onload = function () {
                ctx.beginPath();
                ctx.arc(profileX + profileSize / 2, profileY + profileSize / 2, profileSize / 2 + 5, 0, Math.PI * 2);
                ctx.strokeStyle = "#000000";
                ctx.lineWidth = 8;
                ctx.stroke();
                ctx.closePath();

                ctx.beginPath();
                ctx.arc(profileX + profileSize / 2, profileY + profileSize / 2, profileSize / 2, 0, Math.PI * 2);
                ctx.closePath();
                ctx.clip();

                ctx.drawImage(profileImg, profileX, profileY, profileSize, profileSize);
        
                let dataURL = canvas.toDataURL("image/png");
                callback(dataURL);
            };
            profileImg.onerror = function() {
                console.error('Profile image failed to load');
            };
        };
        bgImage.onerror = function() {
            console.error('Background image failed to load');
        };
    }

    generateShareImage((base64Image) => {
        const payload = {
            intent: 'SHARE',
            image: base64Image,
            text: `‡¶Ü‡¶Æ‡¶ø ${result.title}!\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡ßÅ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï? ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®!`,
            data: {
                myResult: result.title,
                score: totalScore
            }
        };
    
        if (FBInstant.shareAsync) {
            FBInstant.shareAsync(payload)
            .then(() => console.log('Share Successful!'))
            .catch(error => console.error('Error sharing: ', error));
        } else {
            console.error('FBInstant.shareAsync is not available.');
        }        
    });
}

function showEmailCol() {
    hideComponent(quizSec);
    showComponent(emailSec);
}

